FROM node:16-alpine as build

WORKDIR /app

# Copy package.json first to leverage Docker's caching
COPY src/frontend/package.json ./

# Install dependencies with a timeout and cache clean to reduce size
RUN npm install --production --no-cache

# Copy only what's needed for the build
COPY src/frontend/public ./public
COPY src/frontend/src ./src

# Build the application with reduced CPU usage
ENV NODE_OPTIONS="--max-old-space-size=2048"
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy the build output to replace the default nginx contents
COPY --from=build /app/build /usr/share/nginx/html

# Copy the assets directory to the nginx server
COPY assets /usr/share/nginx/html/assets

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"] 